#+startup: beamer
#+LaTeX_CLASS: beamer
#+STARTUP: overview
#+STARTUP: hidestars
#+LaTeX_CLASS_OPTIONS: [presentation]
#+BEAMER_FRAME_LEVEL: 2
#+COLUMNS: %40ITEM %10BEAMER_env(Env) %4BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)
#+BEAMER_HEADER_EXTRA \beamerdefaultoverlayspecification{<+->}


#+TITLE: Курсовая работа
#+AUTHOR: Кузнецов М.А.
#+DATE: 24 мая 2012
* LATEX OPTIONS 						   :noexport:
#+OPTIONS: toc:nil
** Packages
#+LATEX_HEADER: \usepackage[english,russian]{babel}
#%+LATEX_HEADER: \usepackage{mathtools}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{amsfonts}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{algorithmic} \usepackage[ruled]{algorithm}
#+LATEX_HEADER: \usetheme{Warsaw}
#+LATEX_HEADER: \usepackage{concrete}
#%+LaTeX_HEADER: \usepackage{minted}
#%+LaTeX_HEADER: \usemintedstyle{emacs}
#+LATEX_HEADER: \centering

** User-defined symbols
#+LATEX_HEADER: \def\A{\mathbf{A}}
#+LATEX_HEADER: \def\V{\mathbf{V}}
#+LATEX_HEADER: \def\B{\mathbf{B}}
#+LATEX_HEADER: \def\C{\mathbf{C}}
** HTML export
#+MATHJAX: align:"left" mathml:t path:"http://orgmode.org/mathjax/MathJax.js"


* Tasks 							   :noexport:
** TODO Сделать набросок слайдов
   

* Cодержание
** Вводный слайд
Тензоры широко используются в физике, дифференциальной геометрии, 
а также в теории анизотропных сред (которые могут быть анизотропны изначально, 
как кристаллы низкой симметрии, или вследствие своего движения или напряжений, 
как текущая жидкость или газ, или как деформированное твердое тело). 
Тензорные методы активно используются в многофакторном анализе, в психометрике и хемометрики.
** Каноническое разложение
/Определение/
  
 Тензором A размерности $d$ назовем многомерный массив, элементы которого A(i_1,i_2,\ldots,i_d) имеют $d$ 
индексов. $1 \leq i_k \leq n_k$; $n_k$ называются модовыми размерами (размерами мод)

 /Определение/

 Каноническим разложением многомерного массива (/тензора/) 
называется представление вида 

\begin{equation}\label{curs:eq1}
A(i_1,i_2,\ldots,i_d) = \sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots U_d(i_d,\alpha),
\end{equation}
где U_k называются /факторами/ канонического разложения, а $r$ --- каноническим рангом.

** Мотивировка
 Конечная цель: задача об интерполяции многомерных данных
** Цель курсовой работы
  Целью курсовой работы является изучение метода переменных направлений для 
канонической аппроксимации тензора, и написание его эффективной реализации. К программе предъявляются 
следующие требования:
1) Она должна работать для любой размерности тензора.
2) Реализация на Python

** Простейший функционал
Пусть задан тензор $A$ с элементами $A_{i_1 \ldots i_d}$. Задача состоит в том, чтобы найти его
  каноническое приближение, а именно найти такие матрицы $U_1,\ldots,U_d$

\begin{equation}\label{curs:caneq}
A_{i_1,\ldots,i_d} \approx  \sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots U_d(i_d,\alpha).
\end{equation}
Математическая постановка задачи состоит в том, чтобы решить задачу
\eqref{curs:caneq} в смысле наименьших квадратов
\begin{equation*}
F=\sum_{i,j,k=1} (A_{ijk}-\sum_{\alpha=1}^r U_{i\alpha}V_{j\alpha}W_{k\alpha})^2.
\end{equation*}
** Метод ALS: идея

Основная идея алгоритма, состоит в том, чтобы фиксировать все факторы,
кроме одного, канонического разложения и искать минимум функционала 
\begin{equation*}
F=\sum_{i,j,k=1} (A_{ijk}-\sum_{\alpha=1}^r U_{i\alpha}V_{j\alpha}W_{k\alpha})^2.
\end{equation*}
только по нему.
Путем циклических перестановок, используя уже полученные факторы, строятся последующие, до тех пор,
пока не будет достигнута требуемая точность аппроксимации или, пока не сработают другие критерии
остановки алгоритма
** Формулы метода ALS

Найдем частную производную функционала F по U_{\hat i\hat\alpha} и приравняем ее к 0:
\begin{equation*}
\frac{\partial F}{\partial U_{\hat i \hat \alpha}} = 
2 \Big( \sum_{i,j,k} (A_{ijk}-\sum_{\alpha} U_{i \alpha}V_{j\alpha}W_{k\alpha})\Big)\Big(-
\sum_{\check \alpha}\ (V_{j\check \alpha}W_{k\check \alpha})
\frac{\partial U_{i \check \alpha}}{\partial U_{\hat i \hat \alpha}}\Big) =0;
\end{equation*}
\begin{equation*}
\frac{\partial U_{i \check \alpha}}{\partial U_{\hat i \hat \alpha}} =
\delta_{i,\hat i}\delta_{\check \alpha \hat \alpha};
\end{equation*}

Окончательно, получаем следующие соотношения:
\begin{equation*}
\sum_{j,k} A_{\hat ijk}V_{j \hat \alpha}W_{k\hat \alpha}=
\sum_{j,k,\alpha} U_{\hat i\alpha}V_{j\alpha}W_{k\alpha}V_{j\hat \alpha}
W_{k,\hat \alpha},
\end{equation*}
** Формулы ALS
Обозначим через M_{\alpha \hat \alpha}
матрицу с элементами
\begin{equation}\label{curs:lev}
M_{\alpha,\hat \alpha} = (\sum_{j}V_{j,\alpha}
V_{j\hat \alpha}) (\sum_{k}W_{k\alpha}W_{k\hat \alpha});
\end{equation}
тогда
\begin{equation}\label{curs:prav}
\sum_{\alpha} U_{\hat i, \alpha}M_{\alpha,\hat \alpha} = 
\sum_{j,k} A_{\hat i,j,k}V_{j, \hat \alpha}W_{k,\hat \alpha};
\end{equation}
Через  F_{i,\hat \alpha} обозначим правую часть. Тогда, имеем
\begin{equation}
\sum_{\alpha} U_{\hat i \alpha}M_{\alpha \hat \alpha}=F_{i \hat \alpha}.
\end{equation}
** В виде системы
или в виде системы линейных уравнений

\begin{equation}\label{curs:q5}
U M = F.
\end{equation}
где $M \in \mathbb{R}^{r \times r}$. 

** Реализация на Python
  Поставленная задача реализации алгоритма ALS на Python предполагает:
- Реализацию алгоритма в виде единой процедуры для любой размерности
- Реализацию функций вычисления правой и левой частей системы \eqref{curs:q5}, используя математические ухищрения и возможности Python, для того чтобы обойти проблему неопределенной размерности, так как предыдущий пункт эту проблему ставит.
- Ограничение интрументария стандартными функциями библиотек (довольно богатых),чтобы избежать потерь в скорости, так как Python интерпретируемый скриптовый язык.
** Численные эксперименты
Поведение невязки при разных размерностях тензора
#+begin_center
#+attr_latex: width=3.5cm
[[file:zav.pdf]]
#+end_center
Зависимость времени выполнения программы от размерностей тензора
#+begin_center
#+attr_latex: width=3.5cm
[[file:totd.pdf]]
#+end_center

** Численные эксперименты2
Зависимость времени выполнения программы от различных рангов
#+begin_center
#+ATTR_LaTeX: width=3.5cm
[[file:totr.pdf]]
#+end_center
Зависимость времени выполнения программы от различных размеров мод
#+begin_center
#+attr_latex: width=3.5cm
[[file:timeotdimenss.pdf]]
#+end_center
** Численные эксперименты3
\begin{equation*}
A[i,j,k] = \frac{1}{i+j+k+1}  ,   i,j,k =1,2,\ldots,n - 1
\end{equation*}
Поведение невязки с разных стартов
#+begin_center
#+attr_latex: width=3cm
[[file:nonrnd5.pdf]]
#+end_center
Поведение невязки при извменении ранга 5,20,37
#+begin_center
#+attr_latex: width=3cm
[[file:r52037.pdf]]
#+end_center
** Тензор матричного умножения
Поведение невязки тензора матричного умножения при ранге 7 и 6

#+begin_center
#+attr_latex: width=5cm
[[file:umnoj.pdf]]
#+end_center
** Выводы и планы
В ходе выполнения работы была получена реализация алгоритма ALS, удовлетворяющая требованиям:
1) Независимости от размерносмти тензора
2) Реализации с помощью библиотек и стандартных средств языка Python
Результаты рассчетов по реализации программы на Python согласуются с известными результатами. 

В дальнейшем полученный опыт планируется распространить другие форматы и функционалы:
TT (TensorTrain) и на задачу интерполяции многомерных функций
