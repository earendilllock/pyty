#+STARTUP: overview
#+STARTUP: hidestars
#+OPTIONS: LaTeX:t
#+OPTIONS: toc:nil
#+LaTeX_CLASS: per-file-class
#+TITLE: Каноническая аппроксимация тензоров и ее реализация на Python
#+AUTHOR: Кузнецов М.А.
#+DATE: 
* LATEX OPTIONS 						   :noexport:
#+OPTIONS: toc:nil
** Packages
#+LATEX_HEADER: \usepackage[T2A]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[english,russian]{babel}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{amsfonts,amsmath,amssymb}
#+LATEX_HEADER: \usepackage{color}
#+LATEX_HEADER: \usepackage{algorithmic} \usepackage[ruled]{algorithm}
#+LATEX_HEADER: \usepackage[unicode=true,plainpages=false]{hyperref}
#+LATEX_HEADER: \hypersetup{colorlinks=true,linkcolor=magenta,anchorcolor=magenta,urlcolor=blue,citecolor=blue}
** User-defined symbols
#+LATEX_HEADER: \def\A{\mathbf{A}}
#+LATEX_HEADER: \def\V{\mathbf{V}}
#+LATEX_HEADER: \def\B{\mathbf{B}}
#+LATEX_HEADER: \def\C{\mathbf{C}}
** Geometry
#+LATEX_HEADER: \usepackage[left=2.5cm,top=2cm,right=2cm,bottom=2cm,a4paper]{geometry}
* Введение
#+begin_comment
введение можно посмотреть у Калды. (если она конечно у меня есть),
если нет то скачать
#+end_comment
Тензоры широко используются в физике, в теориях, обладающих геометрической природой
(таких, как Общая теория относительности) 
или допускающих полную или значительную геометризацию 
(к таковым можно в значительной степени отнести практически все современные
 фундаментальные теории — электродинамика, релятивистская механика и т. д.), 
а также в теории анизотропных сред (которые могут быть анизотропны изначально, 
как кристаллы низкой симметрии, или вследствие своего движения или напряжений, 
как текущая жидкость или газ, или как деформированное твердое тело). 
Кроме того, тензоры широко используются в механике абсолютно твердого тела.
Однако вместо заданного многомерного массива
часто нужно пользоваться его приближением, свойства которого известны, 
возможно, в отличие от заданного.
всвязи с этим, в последние десять лет сильно возрос интерес к каноническим аппроксимациям
тензора. Одному из методов построения такой аппроксимации и посвящена данная работа.
** Цель курсовой работы
  Целью курсовой работы является изучение метода переменных направлений для 
канонической аппроксимации тензора, и написание его эффективной реализации. К программе предъявляются 
следующие требования:
1) Независимость от размерности тензора
2) Реализация на Python

Интерес к пункту 1) обусловлен тем, что многомерные массивы в памяти должны быть представлены
как одномерные, и для выполнения операций с большим числом индексов необходмо предпринимать
специальные усилия.

Язык Python выбран потому, что он является удобной средой для прототипирования сложных 
вычислительных алгоритмов, однако его использование добавляет дополнительные сложности: 
циклы в этом языке являются достаточно медленными, и задачу необходимо свести к операциям с матрицами.

В настоящее время автору неизвестны программы, реализующие алгоритм построения канонической
аппроксимации произвольного тензора, написанные на Python.

* Основные определения и понятия
Введем основные определения, необходимые для дальнейшего изложени:
/Определение/
  
 Тензором A размерности $d$ назовем многомерный массив, элементы которого A(i_1,i_2,\ldots,i_d) имеют $d$ 
индексов.

 /Определение/

 Каноническим разложением многомерного массива (/тензора/) 
называется представление вида 

\begin{equation}\label{curs:eq1}
A(i_1,i_2,\ldots,i_d) = \sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots U_d(i_d,\alpha),
\end{equation}
где U_k называются /факторами/ канонического разложения, а $r$ --- каноническим рангом.

Уравнение \eqref{curs:eq1} является основным.
** О ранге тензора
Рангом $r$ тензора $A$ называется наименьшее наименьшее $r$, которое в выражении \eqref{curs:eq1}
дает искомый тензор. К сожалению, не существует конечного алгоритма поиска тензорного ранга, 
с чем сопряжены определенные трудности в построении канонического разложени и канонической 
аппроксимации. В данной работе была реализована процедура, строящая тензор требуемого ранга 
из набора случайных компонент (см. "Реализация на Python")

* Алгоритм ALS
  Пусть задан тензор $A$ с элементами $A_{i_1 \ldots i_d}$. Задача состоит в том, чтобы найти его
  каноническое приближение, а именно найти такие матрицы $U_1,\ldots,U_d$

\begin{equation}\label{curs:caneq}
A_{i_1,\ldots,i_d} \approx  \sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots U_d(i_d,\alpha).
\end{equation}
Математическая постановка задачи состоит в том, чтобы поставить задачу
\eqref{curs:caneq} в смысле наименьших квадратов
#+begin_latex
\begin{align}
\sum_{i_1,\ldots,i_d} \Big(A(i_1,\ldots,i_d)-
\sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots
U_d(i_d,\alpha)\Big) ^2
\longrightarrow \min.
\end{align}
#+end_latex

Будем решать вариационную задачу поиска аппроксимации тензора с помощью алгоритма ALS
(Alternating Least Squares). основная идея алгоритма, состоит в том, чтобы фиксировать все,
кроме одного фактора канонического разложения и искать минимум функционала по одной переменной.
Путем циклических перестановок, используя уже полученные факторы, строить последующие, до тех пор,
пока не будет достигнута требуемая точность аппроксимации или, пока не сработают другие критерии
остановки алгоритма (превышение максимального количества итераций,
превышение времени выполнения программы). Построим один шаг алгоритма ALS.
** Описание алгоритма ALS
Для упрощения рассчетных формул проведем построение метода отыскания минимума
для тензора размерности 3 (в $d$ -мерном случае рассуждения аналогичны).
Введем функционал F,
\begin{equation}
F=\sum_{i,j,k=1} (A_{ijk}-\sum_{\alpha=1}^r U_{i\alpha}V_{j\alpha}W_{k\alpha})^2.
\end{equation}
Найдем частную производную функционала F по U_{\hat i\hat\alpha} и приравняем ее к 0:
\begin{equation*}
\frac{\partial F}{\partial U_{\hat i \hat \alpha}} = 
2 \Big( \sum_{i,j,k} (A_{ijk}-\sum_{\alpha} U_{i \alpha}V_{j\alpha}W_{k\alpha})\Big)\Big(-
\sum_{\check \alpha}\ (V_{j\check \alpha}W_{k\check \alpha})
\frac{\partial U_{i \check \alpha}}{\partial U_{\hat i \hat \alpha}}\Big) =0;
\end{equation*}
\begin{equation*}
\frac{\partial U_{i \check \alpha}}{\partial U_{\hat i \hat \alpha}} =
\delta_{i,\hat i}\delta_{\check \alpha \hat \alpha};
\end{equation*}

Отсюда,
\begin{equation*}
-\sum_{i,j,k,\check \alpha} A_{ijk} \delta_{i\hat i} \delta_{\check\alpha \hat\alpha}
V_{j\check \alpha}W_{k\check \alpha} +
\sum_{i,j,k,\alpha,\check \alpha} U_{i\alpha}V_{j\alpha}
\delta_{i\hat i}\delta_{\check \alpha\hat \alpha}
V_{j,\check \alpha}W_{k\check \alpha}=0;
\end{equation*}
Окончательно, получаем следующие соотношения:
\begin{equation*}
\sum_{j,k} A_{\hat ijk}V_{j \hat \alpha}W_{k\hat \alpha}=
\sum_{j,k,\alpha} U_{\hat i\alpha}V_{j\alpha}W_{k\alpha}V_{j\hat \alpha}
W_{k,\hat \alpha},
\end{equation*}
где
\begin{equation*}
\sum_{j,k,\alpha} U_{\hat i,\alpha}V_{j,\alpha}W_{k,\alpha}V_{j,\hat \alpha}
W_{k,\hat \alpha}= \sum_{\alpha} U_{\hat i,\alpha}(\sum_{j}V_{j,\alpha}
V_{j,\hat \alpha}) (\sum_{k}W_{k,\alpha}W_{k,\hat \alpha});
\end{equation*}
Обозначим через M_{\alpha \hat \alpha}
матрицу с элементами
\begin{equation*}
M_{\alpha,\hat \alpha} = (\sum_{j}V_{j,\alpha}
V_{j\hat \alpha}) (\sum_{k}W_{k\alpha}W_{k\hat \alpha});
\end{equation*}
тогда
\begin{equation*}
\sum_{\alpha} U_{\hat i, \alpha}M_{\alpha,\hat \alpha} = 
\sum_{j,k} A_{\hat i,j,k}V_{j, \hat \alpha}W_{k,\hat \alpha};
\end{equation*}
Через  F_{i,\hat \alpha} обозначим правую часть. Тогда, имеем
\begin{equation}
\sum_{\alpha} U_{\hat i \alpha}M_{\alpha \hat \alpha}=F_{i \hat \alpha}.
\end{equation}
или в виде системы линейных уравнений

\begin{equation}\label{curs:q5}
U M = F.
\end{equation}
где $M \in \mathbb{R}^{r \times r}$. 

Путем циклических перестановок аналогичные соотношения получаем для V,с построенной 
матрицей U,и W, с построенными матрицами U,V. 

В методе ALS гарантировано убывание невязки, однако до последнего времени не было 
известно даже теорем о локальной сходимости. Тем не менее, метод ALS является простым,
и часто наиболее эффективным, методом канонической аппроксимации тензоров. 

** Оценка сложности алгоритма ALS
#+begin_comment
Супер комментарий
A^{\top}
#+begin_src python :exports code
#+end_src
\circ --- поэлементное произведение
\min
\max
добавить параграфы про каждую функцию. 
Добавить про питон.
эксперименты и критерий остановки довести до ума.
про критерий написать про нулевой градиент 
заключение.
Цель курсовой работы добавить в введение. где встречаются задачи аппроксимация.
и почему нужны тензоры. и вообще введение посмотреть у калиничева чего у него 
там много написано, сделать похоже.
добавить заключение в духе:
в ходе выполнения курсовой работы получено то да се.
 
#+end_comment
  Предположим, что заданный тензор A имеет размеры мод $n_1,n_2,n_3$ и ранг $r$.
Тогда матрицы $U \in \mathbb{R}^{n_1 \times r}, V \in \mathbb{R}^{n_2 \times r},
W \in \mathbb{R}^{n_3 \times r}$.

Простейшая программа для вычисления U_{i \alpha} может быть написана с помощью
помощью вложенных циклов. Так как индексы $i,j,k$ меняются в пределах $1 \ldots n_1,
n_2, n_3$ соответственно, а  \alpha  в пределах $1 \ldots r$, получим следующие соотношения:
  
Сложность вычисления левой части системы для одной матрицы U пропорциональна
 
$O \Big((n_2+n3)r^2\Big)$;

аналогично для V и W:

$O \Big((n_3+n_1)r^2\Big); O \Big((n_1+n_2)r^2\Big)$;

Сложность вычисления правой части $O (n_1n_2n_3r)$;

* Реализация на Python
  Поставленная задача реализации алгоритма ALS на Python предполагает:
- Реализацию алгоритма в виде единой процедуры для любой размерности
- Реализацию функций вычисления правой и левой частей системы \eqref{curs:q5},
используя математические ухищрения и возможности Python, для того 
чтобы обойти проблему неопределенной размерности, так как 
предыдущий пункт эту проблему ставит.
- Ограничение интрументария стандартными функциями библиотек (довольно богатых), 
чтобы избежать потерь в скорости, так как Python интерпретируемый скриптовый язык.

В ходе нааписание программы были реализованы следующие функции:
- Функция вычисления правой части (rights)
- Функция вычисления левой части (lefts)
- Функция получения случайного тензора известного ранга (randomtensor)
- Функция получения тензора по заданным факторам разложения (gettensor)
** О языке Python
Python --- высокоуровневый язык программирования общего назначения, ориентированный
на производительность разработчика и читаемость кода. Python является интерпретируемым языком,
и эталонной реализацией интерпритатора считается CPython. Благодаря большому количеству
библиотек и специальных модулей, решение большого количества задач упрощается с помощью 
их использования, более того сокращается время как разработки, так и  выполнения программ.
в ходе написания данной работы, автором использовались следующие библиотеки:
- NumPy --- библиотека для работы с матрицами и многомерными массивами, включающая высокоуровневые математические функции для операций с ними.
- SciPy --- библиотека, содержащая большое количество математических функций, а также средства для визуализации полученных результатов.
- стандартные библиотеки Time и прочие.

Разработчики Python придерживаются определенной философии программирования "Zen of Python"
("Дзен Питона"), автором которой является Тим Пейтерс, и которая выводится единожды за сеанс,
по команде 
#begin_src python :exports code
import this
#end_src

** Текст философии:

 Красивое лучше, чем уродливое.

 Явное лучше, чем неявное.

 Простое лучше, чем сложное.

 Сложное лучше, чем запутанное.

 Плоское лучше, чем вложенное.

 Разреженное лучше, чем плотное.

 Читаемость имеет значение.

 Особые случаи не настолько особые. чтобы нарушать правила.

 При этом практичность важнее безупречности.

 Ошибки никогда не должны замалчиваться.

 Если не замалчиваются явно.

 Встретив двусмысленность, отбрось искушение угадать.

 Должен существовать один --- и, желательно, только один --- очевидный способ сделать это.

 Хотя он поначалу может быть и не очевиден, если вы не голландец.

 Сейчас лучше, чем никогда.

 Хотя никогда зачастую лучше, чем прямо сейчас.

 Если реализацию сложно объяснить --- идея плоха.

 Если реализацию легко объяснить --- идея, возможно, хороша.

 Пространства имён --- отличная штука! Будем делать их побольше!
** Функция вычисления правой части (rights)
Вычисление правой части системы \eqref{curs:q5} представляет некоторую сложность,
при попытке реализации с помощью циклов (в силу переменности размерности тензора),
поэтому прибегнем к математическим преобразованиям, с целью получить матрично-матричные
произведения. Для простоты изложения, вновь ограничимся размерностью тензора $d$ = 3
\begin{equation*}
F_{i \alpha} = \sum_{j,k} A_{ijk}V_{j \alpha}W_{k \alpha}=
\sum_{j,k,\beta} A_{ijk}V_{j \alpha} \delta(\alpha,\beta) W_{k \beta}=
\sum_{j,\beta} V_{j \alpha} \delta(\alpha,\beta) \sum_{k} A_{ijk} W_{k \beta};
\end{equation*}
заметим здесь матричные перемножения:
\begin{noequation*}
F_{i \alpha} =W_{\alpha}(V_{\alpha} A_{i})
\end{equation*}
Данное выражение обобщается и на случай произвольной размерности тензора.
Поясним эту запись для произвольной размерности тензора.
\begin{equation}\label{curs:l}
F_{i\alpha}=U_{d\alpha}U_{d-1 \alpfa}\ldots U_{k+1 \alpha}U_{k-1 \alpha}\ldots U_{1\alpha}A_{i}
\end{equation}
Данная формула дает нам схему вычисления элемента матрицы $F в позиции i\alpha$.
Однако прямо воспользоваться этой формулой не получится, это скорее некоторая
формальная запись. На самом деле $A_i$ --- срезка тензора по $k-ой$ оси, причем
размер ее приведен к размеру вектора $U_{j\alpha}, где $j \ne k, j=1\ldots d, d$ --- размерность тензора
так, чтобы было возможно умножение на него справа. Номер $k$ соответсвует вычисляемому фактору $U_k$.
Результат каждого умножения назовем матрицей $S$. "Свертка" формулы \eqref{curs:l} (то есть умножение вектора на матрицу)
происходит справа налево, каждый раз меняя размерность полученной матрицы, 
чтобы умножение на следующий вектор было возможным. То есть:
\begin{equation*}
S=U_{j \alpha}S
\end{equation*}
Последовательно размер (не размерность!) матрицы уменьшается на размер $j$-го фактора.
Перемножив таким образом все известные факторы $U_j$
найдем элемент F_{i\alpha}. Для вычисления же всей матрицы F потребуется $i$ \alpha 
таких "элементарных" операций.
Чтобы окончательно понять, каков алгоритм получения правой части, приведем код функции:

Входные данные: a --- тензор, u --- список известных (фиксированных) факторов, d --- размерность тензора, r --- ранг тензора, k --- номер вычисляемого фактора.

Выходные данные: правая часть системы, f
#+begin_src python :exports code 
def rights(a,u,dimension,d,r,k):
  f=zeros((dimension[k],r))
  
  for i in range (0,dimension[k]):
    for alf in range(0,r):
      kol=0
      for j in range(0,d):
        if (j<>k):
          if(kol<>1):
            s=dot(u[j][:,alf],a.take([i],axis=k).reshape(size(u[j][:,alf]),
size(a.take([i],axis=k))/size(u[j][:,alf]),order='F'))
     
            kol=1
          else:
            s=s.reshape(size(u[j][:,alf]),size(s)/size(u[j][:,alf]),order='F')
            s=dot(u[j][:,alf],s)
      f[i,alf]=s
  return f
#+end_src

** Функция вычисления левой части (lefts)
Левaя часть системы \eqref{curs:q5} может быть вычислена по формуле:
\begin{equation}
(U_1^T U_1)\circ(U_2^T U_2)\circ\dots\circ(U_d^T U_d),
\end{equation}
где под символом '\circ' подразумевается поэлементное произведение, а в скобках матричное.
Обе эти операции реализованы с помощью стандартных функций Python.

Реализация на Python такова:
#+begin_src python :exports code
def lefts(u,k,d,r):
  m=ones((r))
  for i in range(0,d):
    if (i<>k):
      
      m=m*dot(u[i].transpose(),u[i])
  return m
#+end_src
Входные данные: u --- список факторов, k--- номер вычисляемого фактора, d --- размерность тензора, r--- ранг.
Выходные данные: m --- левая часть системы.
** Функция получения случайного тензора 
\begin{equation}\label{curs:caneq}
A_{i_1,\ldots,i_d} =  \sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots U_d(i_d,\alpha).
\end{equation}
для получения здесь матрично матричных перемножений применим хитрость:
\begin{equation}\label{curs:caneq1}
A_{i_1,\ldots,i_d} =  \sum_{\alpha=1}^r U_1(i_1,\alpha) U_2(i_2,\alpha) \ldots U_d(i_d,\alpha)=
\sum_{\alpha_1}^r U_1(i_1,\alpha_1)\delta(\alpha_1,\alpha_2)\sum_{\alpha_2}^r U_2(i_2,\alpha_2)\ldots
\sum_{\alpha_d}^r U_d(i_d,\alpha_d);
\end{equation}
в итоге получим:
\begin{equation*}
A=U_1\hat U_2 \ldots \hat U_{d-1} U_d;
\end{equation*}

где $\hat U_j$ имеет вид:

\left(
\begin{matrix}
U_{j}(1) &0&0& \ldots &0\\
0& U_{j}(2)&0& \ldots&0\\
&&\ldots&&&\\
0&\ldots&0&0&U_{j}(r)\\
\end{matrix}
\right);

$U_j(k)$ --- столбец матрицы $U_j$, $j=2,\ldots,d-1$, $k=1,\ldots,r$.
$\hat U_j \in \matbb{R}^{r,rn}$

Код процедуры:
#+begin_src python :exports code
def randomtensor(r,dimension,d):
  u=list(arange(d))
  for i in range(0,d):
    u[i]=randn(dimension[i],r)
  u0=[x.copy() for x in u]
  s=1
  tr=u[0]
  temp=list(arange(d-2))
  for j in range(0,d-2):
    temp=zeros((r,r*dimension[j+1]))
    for i in range(0,r):
      temp[i,i*dimension[j+1]:i*dimension[j+1]+dimension[j+1]]=u[j+1][:,i].transpose()
    u[j+1]=temp.transpose()
  for i in range(0,d-1):
    s=size(tr)/r
    tr=tr.reshape(s,r,order='F')
    tr=dot(tr,u[i+1].transpose())
  tr=tr.reshape(dimension,order='F')
  return tr,u0
#+end_src
Входные данные: ранг, размеры мод, размерность тензора
Выходные данные: построенный тензор, факторы тензорного разложения.

** Функиця получения тензора по заданным факторам
Идея преобразований аналогична изложенной в предыдущем пункте, поэтому ограничимся только 
предоставлением реализации:
#+begin_src python :exports  code
def gettensor(u1,r,dimension,d):
  u=[x.copy() for x in u1]
  s=1
  tr=u[0]
  temp=list(arange(d-2))
  for j in range(0,d-2):
    temp=zeros((r,r*dimension[j+1]))
    for i in range(0,r):
      temp[i,i*dimension[j+1]:i*dimension[j+1]+dimension[j+1]]=u[j+1][:,i].transpose()
    u[j+1]=temp.transpose()
  for i in range(0,d-1):
    s=size(tr)/r
    tr=tr.reshape(s,r,order='F')
    tr=dot(tr,u[i+1].transpose())
  tr=tr.reshape(dimension,order='F')
  return tr

#+end_src
Входные данные: факторы, ранг, размерности мод, размерность тензора.
Выходные данные: построенный тензор.
** Критерий остановки 
Критерием остановки случат несколько параметров:
1) $||A-\hat A||_2 < \varepsilon$ где $A$ --- заданный тензор, $\hat A$ --- аппроксимация. Точность \varepsilon задается пользователем.
2) Алгоритм ALS формально ищет локальный минимум, вследствие чего критерий 1)
может быть выполнен за большое время, если алгоритм попал в область локального 
минимума функционала. Всвязи с этим дополнительно считается 
\begin{equation*}
\frac{||U_{i new}-U_{i}||_2}{||U_i||_2} < \varepsilon_2},
\end{equation*}
где точность \varepsilon_2 зависит от заданной пользователем \varepsilon
* Численные эксперименты
 В данном параграфе будут изложены в графическом виде результаты работы программы, реализующей метод ALS. 
В качестве входных данных подавались:
 - Размерность тензора $d$ = 3
 - Ранг $r$ переменный
 - Размерности мод $dimension_i$ переменные
** Численные эксперименты для случайных тензоров
 В качестве входного тензора подается тензор, случайным образом полученный программно (с помощью процедуры
gettensor) наперед заданного ранга и размерностей мод. 

Первый цикл экспериментов призван был установить характер поведения нормы невязки 
\begin{equation}\label{curs:eq2}
max|A(i_1,i_2,i_3)-Approximation(i_1,i_2,i_3)|
\end{equation}

где Approximation(i_1,i_2,i_3) --- аппроксимация заданного тензора, построенная с помощью алгоритма
ALS, реализованного на Python.

Ниже приводятся графики поведения нормы невязки  в зависимости от числа итераций. 

- Для случайного тензора ранга $r$ = 5
#+attr_latex: width=8cm
#+begin_src python :exports results :results output raw :cashe yes
from test import *
from numpy import *
from pylab import *
d=3
dimension=[32,32,32]
r=5
a,u0=randomtensor(r,dimension,size(dimension))
eps=1e-6
a1, u,no=ALSproc(a,d,r,dimension,eps)
plot(no)
xlabel('Iterations')
ylabel('Norm')
title('Graphic of norm')
fname="rnd5.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src

#+results:
| file:rnd5.pdf |




- Для случайного тензора ранга $r$ = 10

На этом примере метод попал в локальный минимум функционала (\eq2), вследствии чего невязка убывает медленно почти
на всем протяжении времени работы алгоритма. Однако миновав локальный минимум, метод сошелся очень быстро.
#+attr_latex: width=8cm
#+name: pic1
#+begin_src python :exports results :results output raw :cashe yes
from test import *
from numpy import *
from pylab import *
d=3
dimension=[32,32,32]
r=10
a,u0=randomtensor(r,dimension,size(dimension))
eps=1e-6
a1,u,no=ALSproc(a,d,r,dimension,eps)
plot(no)
xlabel('Iterations')
ylabel('Norm')
title('Graphic of norm')
fname="rnd10.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src

[[file:rnd10.pdf]]

- Для случайного тензора ранга $r$ = 25
#+attr_latex: width=8cm
#+begin_src python :exports results :results output raw :cashe yes
from test import *
from numpy import *
from pylab import *
d=3
dimension=[32,32,32]
r=25
a,u0=randomtensor(r,dimension,size(dimension))
eps=1e-6
a1,u,no=ALSproc(a,d,r,dimension,eps)
plot(no)
xlabel('Iterations')
ylabel('Norm')
title('Graphic of norm')
fname="rnd25.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src
[[file:rnd25.pdf]]

- Для случайного тензора ранга $r$ = 100
#+attr_latex: width=8cm
#+begin_src python :exports results :results output raw :cashe yes
from test import *
from numpy import *
from pylab import *
d=3
dimension=[32,32,32]
r=100
a,u0=randomtensor(r,dimension,size(dimension))
eps=1e-6
a1,u,no=ALSproc(a,d,r,dimension,eps)
plot(no)
xlabel('Iterations')
ylabel('Norm')
title('Graphic of norm')
fname="rnd100.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src

[[file:rnd100.pdf]]

Несмотря на то, что скорость убывания невязки может варьироваться в зависимости от ранга и начального приближения,
невязка убывает монотонно.

Следующая серия экспериментов показывает графическую зависимость времени выполнения программы от:
- ранга $r$ при фиксированных размерностях тензора
 

#+attr_latex: width=8cm
#+begin_src python :exports none :results none
from test import *
from numpy import *
from pylab import *
from time import *
d=3
dimension=[32,32,32]
r=[2,3,5,10,20,50,100]
mar=zeros((2,7))
for i in xrange(0,7):
  t=time()
  a,u0=randomtensor(r[i],dimension,size(dimension))
  eps=1e-6
  a1,u,no=ALSproc(a,d,r[i],dimension,eps)
  mar[0,i]=time()-t
  mar[1,i]=r[i]
plot(mar[1],mar[0])
xlabel('rank')
ylabel('time')
title('Graphic of time')
fname="totr.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src

в ходе этого эксперимента размерности мод $dimension_i$ брались равными между собой и равными 32 а ранг 
менялся $r$ = 2,3,5,10,25,50,100. Исходя из графика, можно сделать вывод, что время зависит от ранга 
как O(r)
  
- размерностей тензора $n_i$ (i = 1,2,3) при фиксированном ранге

Эта серия экспериментов проводилась с целью изучения зависимости времени выполнения программы от размерностей мод $n_i$ = 32,64,128,250,500 и ранге $r$ = 5.

#+attr_latex: width=8cm 
[[file:totr.pdf]]

Логичным является проверить зависимость времени выполнения программы от различных
размерностей мод. В данном эксперименте $dimension_i$ брались равными: 16, 32, 64, 128, 250,
--- а ранг $r$ равным 5. Получена следующая зависимость:
#+begin_src python :exports none :results none
from test import *
from numpy import *
from pylab import *
from time import *
d=3
tempor=[16,32,64,128,250]

r=5
mar=zeros((2,5))
for i in xrange(0,5):
  dimension=[tempor[i],tempor[i],tempor[i]]
  t=time()
  a,u0=randomtensor(r,dimension,size(dimension))
  eps=1e-6
  a1,u,no=ALSproc(a,d,r,dimension,eps)
  mar[0,i]=time()-t
  mar[1,i]=tempor[i]
plot(mar[1],mar[0])
xlabel('dimension')
ylabel('time')
title('Graphic of time')
fname="rnd88.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src
#+attr_latex: width=8cm
[[file:timeotdimenss.pdf]]

Построим сравнительный график убывания невязки при разных размерностях тензора $d$=3,4,5
#+attr_latex: width=8cm
[[file:zav.pdf]]

И зависмость времени выполнения программы от размерности тензора $d$

#+attr_latex: width=8cm
[[file:totd.pdf]]

** Эксперименты над неслучайными тензорами

В ходе этой серии экспериментов на вход подавался тензор размерности $d$ = 3 вида:
\begin{equation*}
A[i,j,k] = \frac{1}{i+j+k+1}  ,   i,j,k =1,2,\ldots,n - 1
\end{equation*}

График убывания невязки выглядит следующим образом:
#+begin_src python :exports none :results none
from test import *
from numpy import *
from pylab import *
d=3
dimension=[32,32,32]
r=5
a=zeros(dimension)
for i in xrange(0,dimension[0]):
  for j in xrange(0,dimension[1]):
    for k in xrange(0,dimension[2]):
    	a[i,j,k]=1.0/(i+j+k+1)

eps=1e-6
a1, u,no=ALSproc(a,d,r,dimension,eps)
plot(no)
xlabel('Iterations')
ylabel('Norm')
title('Graphic of norm')
fname="nonrnd5.pdf"
savefig(fname)
#clf()
print "[[file:%s]]" % fname
#+end_src
#+attr_latex: width=8cm
[[file:nonrnd5.pdf]]

Метод сошелся за 35000 итераций, однако большую часть времени он находился в области 
локального минимума, а невязка быстро убывала только в начале. Увеличенный график приводится ниже:

#+attr_latex: width=8cm
[[file:nooo.pdf]]

Проследим изменение скорости убывания невязки при изменении ранга.
$r = 5,20,37$
